--!ScriptAPI: 1.14
--!ScriptVersion: 2.2


------------------------------------------------------------------------------
----------- 1. GLOBAL DEFAULTS: add to top of your code and .ini file --------
------------------------------------------------------------------------------

--- Logging level.
local logLevel = {
  Off   = "off",
  Error = "error",
  Warn  = "warn",
  Info  = "info",
  Debug = "debug",
  Trace = "trace",
}

--- Syslog Protocol priority (RFC-5424).
local Priority = {
  USER_ERROR = 11,
  USER_WARN  = 12,
  USER_INFO  = 14,
  USER_DEBUG = 15,
}

--- Logging type/mode.
local LogType = {
  OFFLINE = "offline",
  ONLINE  = "online",
}

--- Minimum log level for logging a line/message.
LOG_LEVEL = logLevel.Info

--- Switch to online or offline/local logs.
LOG_TYPE = LogType.ONLINE

--- Maximum log file size in kilobytes before rollover.
LOG_SIZE = 300

--- Maximum log line/message size in bytes after which is it truncated, if not doing
--- a full send; truncation is the default behavior.
LOG_TRUNCATE_SIZE = 1000

--- URL where logs are shown on Papertrail.
URL_PAPERTRAIL = "http://logs6.papertrailapp.com:17732"

-----------------------------------------------------------------------------
----------- END 1. GLOBAL DEFAULTS ------------------------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
----------- 2. LOGGER DEFINITION: add to functions --------------------------
-----------------------------------------------------------------------------

--- Formats the given or current date according to the ISO 8601 (long) format
--- `yyyy-mm-ddThh:mm:ssÂ±hh:mm`. Currently, `yyyy-mm-ddThh:mm:ss` is returned
--- (only the first 19 out of the 25 characters).<br/>
--- Example of returned date: `2016-11-09T04:25:28` (the full date could be
--- `2016-11-09T04:25:28+01:00`).
---@param date vpos.datetime.DateTime? Date to be formatted; defaults to the current date if `nil`
---@return string # The formatted given or current date
local function dateISO(date)
  local date = date or vpos.datetime.DateTime()
  local day, month, year = date:getDate()
  local hour, minute, second = date:getTime()

  return string.format("%s-%02d-%02dT%02d:%02d:%02d",
                       tostring(year), month, day, hour, minute, second)
end

--- Constants defining which file hosts are allowed.
AllowedFileHosts = {["VPOS"] = true, ["FILE"] = true, ["MEDIAFILE"] = false}

--- Checks for the existance of the file.
---@param fn string The file name/path to be checked
---@param host string? The file host; defaults to "VPOS" if `nil` and a host can't be extracted from `fn`
---@return boolean `true` if the file exists, otherwise `false` <br/>
---@see AllowedFileHosts
function file_exists(fn, host)
  if not fn then return false end

  local i, j = string.find(fn, ":", 1, true)
  local fileHost
  if i then
    fileHost = fn:sub(1, j-1)
    fn = fn:gsub("VPOS:", "")
    fn = fn:gsub("FILE:", "")
  end

  host = host or fileHost or "VPOS"
  if not AllowedFileHosts[host] then return false end

  local scripts = vpos.file.getFileList(host)
  for _, s in pairs(scripts) do
    if fn == s then
      return true
    end
  end
  return false
end

--- The logger object.
Log = {}

--- Creates a logger object.
---@param level string? The minimum log level for logging a line/message; defaults to `logLevel.Info` if `nil`
---@param logType string? The logging type/mode; defaults to `LogType.ONLINE` if `nil`
---@param logSize number? The max. log file size in kilobytes before rollover; defaults to 300 if `nil`
---@param url string? The Papertrail URL; defaults to `URL_PAPERTRAIL` if `nil`
---@param scriptName string? The name of the script which uses this logger; defaults to " " if `nil`
---@param scriptVersion string? The version of the script which uses this logger; defaults to "0" if `nil`
---@param scriptUpdate string? The last update date of the script which uses this logger; defaults to " " if `nil`
---@param vposName string? The name of the VPOS which uses this logger; defaults to "" if `nil`
---@return table self A new logger instance
function logger(level, logType, logSize, url, scriptName, scriptVersion, scriptUpdate, vposName)
  -- create a new instance
  local self = {
    message = ""
  }

  ---@private
  local logTab =  {
    level         = level or logLevel.Info,
    logType       = logType or LogType.ONLINE,
    logSize       = logSize or 300,
    url           = url or URL_PAPERTRAIL,
    scriptName    = scriptName or " ",
    scriptVersion = scriptVersion or "0",
    scriptUpdate  = scriptUpdate or " ",
    vposName      = vposName or ""
  }

  local function logData(message, full)
    -- add the message to queue
    message.datetime = dateISO()
    if not full then
      message.message = message.message:sub(1, LOG_TRUNCATE_SIZE)
    end

    vpos.script.callInterScriptFunctionExt("VPOS:logger.vsp", "ListPushLeft", {async = true}, message)
  end

  -- send data about the script
  function self.scriptInfo(settings)
    logTab.message      = string.format("====== START ======== script:%s __ version:%s __ update:%s __ pv:%s __ serialNo:%s __ ip:%s",
                                        logTab.scriptName, logTab.scriptVersion, logTab.scriptUpdate,
                                        vpos.getSystemInfo(vpos.SystemInfo.SoftwareVersion),
                                        vpos.getSystemInfo(vpos.SystemInfo.Serial),
                                        vpos.getSystemInfo(vpos.SystemInfo.NetworkAddress))
    logTab.messageLevel = logLevel.Info
    logTab.priority     = Priority.USER_INFO
    logData(logTab)

    if settings then
      logTab.message = settings
      logData(logTab, true)
    end
  end

  -- used for 'Trace' log level
  function self.trace(message, full)
    if level == logLevel.Trace then
      local now = vpos.datetime.DateTime():getUnixTime() or ""
      logTab.message      = now .. "@ " .. (message or "")
      logTab.messageLevel = logLevel.Trace
      logTab.priority     = Priority.USER_DEBUG
      logData(logTab, full)
    end
  end

  -- used for 'Debug' log level
  function self.debug(message, full)
    if level == logLevel.Trace or level == logLevel.Debug then
      logTab.message      = message or ""
      logTab.messageLevel = logLevel.Debug
      logTab.priority     = Priority.USER_DEBUG
      logData(logTab, full)
    end
  end

  -- used for 'Info' log level
  function self.info(message, full)
    if level == logLevel.Trace or level == logLevel.Debug or level == logLevel.Info then
      logTab.message      = message or ""
      logTab.messageLevel = logLevel.Info
      logTab.priority     = Priority.USER_INFO
      logData(logTab, full)
    end
  end

  -- used for 'Warn' log level
  function self.warn(message, full)
    if level == logLevel.Trace or level == logLevel.Debug or level == logLevel.Info or
       level == logLevel.Warn then
      logTab.message      = message or ""
      logTab.messageLevel = logLevel.Warn
      logTab.priority     = Priority.USER_WARN
      logData(logTab, full)
    end
  end

  --- Used for `logLevel.Error` logs, which always sends the full message.<br/>
  --- A code line number is prepended to the message, depending on `funLevel`s value:
  --- * if &lt; 1, nothing is prepended;
  --- * if 1, the line number of the calling function is used;
  --- * if &gt; 1, the line number at the given call stack function level is used; if
  ---   no function is present at that level, nothing is prepanded.
  ---@param message string? The message to be logged
  ---@param funLevel number? The call stack function level to prepend debug info; defaults to 1
  function self.error(message, funLevel)
    if level == logLevel.Trace or level == logLevel.Debug or level == logLevel.Info or
       level == logLevel.Warn  or level == logLevel.Error then
      local line = ""
      local f = funLevel or 1
      if f >= 1 then
        local lineNo = tostring(debug.getinfo(f + 1, "l").currentline)
        if lineNo then line = string.format("%4s: ", lineNo) end
      end
      logTab.message      = line .. (message or "")
      logTab.messageLevel = logLevel.Error
      logTab.priority     = Priority.USER_ERROR
      logData(logTab, true)
    end
  end

  --- Logs the given message of the given logging level.<br/>
  --- The `full_or_funLevel` parameter has different meanings, depending on the logging
  --- level:
  --- * for non-error messages, it's a flag to send the full message if `true`, otherwise
  ---   the possibly truncated message;
  --- * for error messages, it represents the call stack function level for prepending
  ---   debug info, which is passed to the error level logging function:
  ---   - &lt; 1 no debug info;
  ---   - 1 debug info from calling function;
  ---   - &gt; 1 debug info from respective function level, or no debug info if unavailable;
  ---   - defaults to 1.
  ---@param messageLevel logLevel The message logging level
  ---@param message string? The message to be logged
  ---@param full_or_funLevel boolean|number? Flag to send the full message for non-error messages, otherwise the call stack function level to prepend debug info
  function self.log(messageLevel, message, full_or_funLevel)
    if messageLevel == logLevel.Error then
      local f = 2
      if type(full_or_funLevel) == "number" then
        f = (full_or_funLevel < 1 and 0) or (full_or_funLevel + 1)
      end
      self.error(message, f)
    else
      local func = self[messageLevel]
      if func then func(message, full_or_funLevel) end
    end
  end

  return self
end

-----------------------------------------------------------------------------
----------- END 2. LOGGER DEFINITION ----------------------------------------
-----------------------------------------------------------------------------


function readIni()

  -----------------------------------------------------------------------------
  ----------- 3. INITIALIZATION PROCEDURE: ------------------------------------
  ----------- read logger settings, initialize logger, ------------------------
  ----------- call scriptInfo to log your script ini file ---------------------
  -----------------------------------------------------------------------------

  if initTab.LOGS then
    LOG_LEVEL         = (initTab.LOGS.LOG_LEVEL         and string.lower(tostring(initTab.LOGS.LOG_LEVEL))) or LOG_LEVEL
    LOG_TYPE          = (initTab.LOGS.LOG_TYPE          and string.lower(tostring(initTab.LOGS.LOG_TYPE)))  or LOG_TYPE
    LOG_SIZE          = (initTab.LOGS.LOG_SIZE          and tonumber(initTab.LOGS.LOG_SIZE))                or LOG_SIZE
    LOG_TRUNCATE_SIZE = (initTab.LOGS.LOG_TRUNCATE_SIZE and tonumber(initTab.LOGS.LOG_TRUNCATE_SIZE))       or LOG_TRUNCATE_SIZE
    URL_PAPERTRAIL    = (initTab.LOGS.URL_PAPERTRAIL    and tostring(initTab.LOGS.URL_PAPERTRAIL))          or URL_PAPERTRAIL
  end

  local scriptName    = vpos.script.currentScript():getName() or ""
  local scriptVersion = tostring(vpos.tables.Table(806):getData(scriptName, 15) or 0)
  local posName       = tostring(vpos.getSystemInfo(vpos.SystemInfo.ECRId):gsub(" ", ""))
  local update        = vpos.tables.Table(806):getData(scriptName, 6)
  local scriptUpdate
  if type(update) == "vec.types.Time" then
    scriptUpdate = tostring(update)
  else
    scriptUpdate = "plsUpdate VPOS"
  end

  if LOG_LEVEL == logLevel.Off then
    -- create a mock "object" with no functionality
    Log = {
      ["scriptInfo"]   = function() end,
      [logLevel.Trace] = function() end,
      [logLevel.Debug] = function() end,
      [logLevel.Info]  = function() end,
      [logLevel.Warn]  = function() end,
      [logLevel.Error] = function() end
    }
  else
    if not file_exists("logger.vsp") then
      vpos.view.showWindow("Log settings wrong!\001 Please set LOG_LEVEL = off or import the logger script!")
      vpos.script.exitScript()
    end
    Log = logger(LOG_LEVEL, LOG_TYPE, LOG_SIZE, URL_PAPERTRAIL, scriptName,
                 scriptVersion, scriptUpdate, posName)
  end

  -- hide passwords from ini files so they are not logged
  for section, settings in pairs(initTab) do
    for k,v in pairs(settings) do
      if k:find("pass") or k:find("password") or k:find("passwort") or k:find("kennwort") then
       settings[k] = "****"
      end
    end
  end

  Log.scriptInfo(vpos.utils.encodeJSON(initTab or {}))

  -----------------------------------------------------------------------------
  ----------- END 3. INITIALIZATION PROCEDURE  --------------------------------
  -----------------------------------------------------------------------------

end

















-------------------------------------------------------------------------------
----------- TESTS -------------------------------------------------------------
-------------------------------------------------------------------------------

------------------------------------------------------------------
-- traces off
------------------------------------------------------------------

function testOff()
  wait:setText("offline off")
  wait:show()

  initTab.LOGS.LOG_LEVEL = logLevel.Off
  initTab.LOGS.LOG_TYPE = LogType.OFFLINE
  initTab.LOGS.LOG_SIZE = 1000
  initTab.LOGS.URL_PAPERTRAIL = URL_PAPERTRAIL

  readIni()

  Log.error ("ERROR com port 1")
  Log.warn ("NO INTERNET")
  Log.info ("Script settings loaded!")
  Log.debug ("var=123012 queue size = 20")
  Log.trace ("TRACE:var=123012 queue size = 20")
  wait:close()
end

------------------------------------------------------------------
-- online traces
------------------------------------------------------------------

function testOnline()
  wait:setText("online trace")
  wait:show()

  initTab.LOGS.LOG_LEVEL = logLevel.Trace
  initTab.LOGS.LOG_TYPE = LogType.ONLINE
  initTab.LOGS.LOG_SIZE = 1000
  initTab.LOGS.URL_PAPERTRAIL = URL_PAPERTRAIL

  initTab.SECTION = {}
  initTab.SECTION.password = "123456"

  initTab.SETTINGS = {}
  initTab.SETTINGS.someSettings = true
  initTab.SETTINGS.anotherSettings = 123012
  initTab.SETTINGS.someSettings = "this is a short text"

  readIni()

  Log.error ("PRI 11   EROARE com port ")
  Log.warn ("PRI 12   NO INTERNET")
  Log.info ("PRI 14   Script settings loaded!")
  Log.debug ("PRI 15   var=123012 queue size = 20")
  Log.trace ("PRI 15   TRACE:var=123012 queue size = 20")

  local httpClient = vpos.communication.HTTPClient ()
  local url = "https://httpbin.org/anything"
  local response, result, err = httpClient:request ("GET", url)

  Log.trace ("PRI 15   gesto request: "..url)
  Log.trace ("PRI 15   gesto request err: "..err)
  Log.trace ("PRI 15   gesto request result: "..result)
  Log.trace ("PRI 15   gesto request response: "..response)

  wait:close()
  vpos.view.showWindow("Test DONE!\001Check PaperTrail!")
end

function testOnlineFastlogs()
  wait:setText("online fast logs")
  wait:show()

  initTab.LOGS.LOG_LEVEL = logLevel.Trace
  initTab.LOGS.LOG_TYPE = LogType.ONLINE
  initTab.LOGS.LOG_SIZE = 1000
  initTab.LOGS.URL_PAPERTRAIL = URL_PAPERTRAIL

  initTab.SECTION = {}
  initTab.SECTION.password = "123456"

  initTab.SETTINGS = {}
  initTab.SETTINGS.someSettings = true
  initTab.SETTINGS.anotherSettings = 123012
  initTab.SETTINGS.someSettings = "this is a short text"

  readIni()

  for i=1,10 do
    Log.error ("EROARE com port "..tostring(i))
  end
  for i=1,10 do
    Log.warn (tostring(i).." NO INTERNET")
  end
  for i=1,10 do
    Log.info (tostring(i).." Script settings loaded!")
  end
  for i=1,10 do
    Log.debug (tostring(i).." var=123012 queue size = 20")
  end
  for i=1,10 do
    Log.trace (tostring(i).." TRACE:var=123012 queue size = 20")
  end

  local httpClient = vpos.communication.HTTPClient ()
  local url = "https://httpbin.org/anything"
  local response, result, err = httpClient:request ("GET", url)

  Log.trace ("gesto request: "..url)
  Log.trace ("gesto request err: "..err)
  Log.trace ("gesto request result: "..result)
  Log.trace ("gesto request response: "..response)

  wait:close()
  vpos.view.showWindow("Test DONE!\001Check PaperTrail!")
end

------------------------------------------------------------------
-- offline traces with fallback to file & size
------------------------------------------------------------------

function testOfflineSize()
  wait:setText("offline trace & size")
  wait:show()

  initTab.LOGS.LOG_LEVEL = logLevel.Trace
  initTab.LOGS.LOG_TYPE = LogType.OFFLINE
  initTab.LOGS.LOG_SIZE = 30
  initTab.LOGS.URL_PAPERTRAIL = URL_PAPERTRAIL

  initTab.SECTION = {}
  initTab.SECTION.password = "123456"

  initTab.SETTINGS = {}
  initTab.SETTINGS.someSettings = true
  initTab.SETTINGS.anotherSettings = 123012
  initTab.SETTINGS.someSettings = "this is a short text"

  readIni()

  Log.error ("EROARE com port 1")
  Log.warn ("NO INTERNET")
  Log.info ("Script settings loaded!")
  Log.debug ("var=123012 queue size = 20")
  Log.trace ("TRACE:var=123012 queue size = 20")

  for i = 1, 100 do
    local httpClient = vpos.communication.HTTPClient ()
    local url = "https://httpbin.org/anything"
    local response, result, err = httpClient:request ("GET", url)

    Log.trace ("httpbin request: "..url)
    Log.trace ("httpbin request err: "..err)
    Log.trace ("httpbin request result: "..result)
    Log.trace ("httpbin request response: "..response)
    Log.trace ("________________________WAIT 2 SEC ")
    vpos.sleep("2000")
  end

  wait:close()
  vpos.view.showWindow("Test DONE!\001Check log file!")
end

function testOfflineFastlogs()
  wait:setText("offline fast logs")
  wait:show()

  local BIG_JSON = [[]]

  initTab.LOGS.LOG_LEVEL = logLevel.Trace
  initTab.LOGS.LOG_TYPE = LogType.OFFLINE
  initTab.LOGS.LOG_SIZE = 30
  initTab.LOGS.URL_PAPERTRAIL = URL_PAPERTRAIL

  readIni()

  for i=1,10 do
    Log.error ("EROARE com port "..tostring(i))
  end
  for i=1,10 do
    Log.warn (" NO INTERNET")
  end
  for i=1,10 do
    Log.info (tostring(i).." Script settings loaded!")
  end
  for i=1,10 do
    Log.debug (tostring(i).." var=123012 queue size = 20")
  end
  for i=1,10 do
    Log.trace (tostring(i).." var=123012 queue size = 20")
  end

  for i = 1, 5 do
    local httpClient = vpos.communication.HTTPClient ()
    local url = "https://httpbin.org/anything"
    local response, result, err = httpClient:request ("GET", url)

    Log.trace ("httpbin request: "..url)
    Log.trace ("httpbin request err: "..err)
    Log.trace ("httpbin request result: "..result)
    Log.trace ("httpbin request response: "..response)
    Log.trace ("________________________WAIT 2 SEC ")
    vpos.sleep("2000")
  end

  for i=1,10 do
    Log.trace (tostring(i).." big JSON: "..BIG_JSON)
  end

  wait:close()
  vpos.view.showWindow("Test DONE!\001Check log file!")
end


-------------------------------------------------------------------------------
----------- MAIN section: clean tests related code in production --------------
-------------------------------------------------------------------------------

wait = vpos.view.InfoWindow("tests", "tests", false)


initTab = {}
initTab.LOGS = {}

readIni()


--testOff()
--testOnline()
--testOfflineSize()
vpos.events.registerEntryPointFunction(1, "testOff")
vpos.events.registerEntryPointFunction(2, "testOnline")
vpos.events.registerEntryPointFunction(3, "testOfflineSize")
vpos.events.registerEntryPointFunction(4, "testOnlineFastlogs")
vpos.events.registerEntryPointFunction(5, "testOfflineFastlogs")
